#cloud-config
write_files:
  - path: /etc/kubernetes/manifests/kube-apiserver.yml
    permissions: 0644
    owner: root
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: quay.io/coreos/hyperkube:${kubernetes_version}
          command:
          - /hyperkube
          - apiserver
          - --bind-address=0.0.0.0
          - --etcd-servers=$private_ipv4:2379
          - --allow-privileged=true
          - --service-cluster-ip-range=${service_ip_range}
          - --secure-port=443
          - --advertise-address=$private_ipv4
          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota

          # - --etcd-servers=https://$private_ipv4:2379
          # - --etcd-cafile=/etc/ssl/kubernetes/ca.pem
          # - --etcd-certfile=/etc/ssl/kubernetes/server.pem
          # - --etcd-keyfile=/etc/ssl/kubernetes/server-key.pem

          - --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem
          - --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem
          - --client-ca-file=/etc/kubernetes/ssl/ca.pem
          - --service-account-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem
          - --runtime-config=extensions/v1beta1/networkpolicies=true
          - --anonymous-auth=false
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              port: 8080
              path: /healthz
            initialDelaySeconds: 15
            timeoutSeconds: 15
          ports:
          - containerPort: 443
            hostPort: 443
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
  - path: /etc/kubernetes/cni/docker_opts_cni.env
    permissions: 0644
    owner: root
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""
  - path: /etc/kubernetes/cni/net.d/10-flannel.conf
    permissions: 0644
    owner: root
    content: |
      {
        "name": "podnet",
        "type": "flannel",
        "delegate": {
          "isDefaultGateway": true
        }
      }
coreos:
  etcd2:
    advertise-client-urls: http://$private_ipv4:2379
    listen-client-urls: http://0.0.0.0:2379

    # discovery: ${etcd_discovery_url}
    # initial-advertise-peer-urls: http://$private_ipv4:2380

    # listen-peer-urls: http://$private_ipv4:2380

  #   cert-file: /etc/ssl/etcd/server.pem
  #   key-file: /etc/ssl/etcd/server-key.pem
  #   client-cert-auth: true
  #   trusted-ca-file: /etc/ssl/etcd/ca.pem
  #   peer-cert-file: /etc/ssl/etcd/server.pem
  #   peer-key-file: /etc/ssl/etcd/server-key.pem
  #   peer-client-cert-auth: true
  #   peer-trusted-ca-file: /etc/ssl/etcd/ca.pem
  flannel:
    etcd_endpoints: http://$private_ipv4:2379
    interface: $private_ipv4
    # etcd_cafile: /etc/ssl/etcd/ca.pem
    # etcd_certfile: /etc/ssl/etcd/server.pem
    # etcd_keyfile: /etc/ssl/etcd/server-key.pem
  # locksmith:
  #   endpoint: https://$private_ipv4:2379
  #   etcd_cafile: /etc/ssl/etcd/ca.pem
  #   etcd_certfile: /etc/ssl/etcd/server.pem
  #   etcd_keyfile: /etc/ssl/etcd/server-key.pem
  update:
    reboot-strategy: "etcd-lock"
  units:
    # - name: kubelet.service
    #   command: start
    #   enabled: true
    #   content: |
    #     [Service]
    #     Environment=KUBELET_VERSION=v1.5.2_coreos.0
    #     Environment="RKT_OPTS=--uuid-file-save=/var/run/kubelet-pod.uuid"
    #     ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
    #     ExecStart=/usr/lib/coreos/kubelet-wrapper \
    #     --api-servers=http://127.0.0.1:8080 \
    #     --pod-manifest-path=/etc/kubernetes/manifests
    #     ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
    - name: etcd2.service
      enable: true
      command: start

    - name: flanneld.service
      command: start
      enable: true
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/etcdctl --endpoints http://$private_ipv4:2379 set /coreos.com/network/config '{"Network":"${pod_network}","Backend":{"Type":"vxlan"}}'

    - name: docker.service
      enable: true
      command: start
      drop-ins:
        - name: 10-restart_60s.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
    - name: "kubelet.service"
      command: start
      content: |
        [Unit]
        Requires=docker.service
        After=docker.service

        [Service]
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers

        Environment=KUBELET_VERSION=${kubernetes_version}
        Environment="RKT_OPTS=--volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log \
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf
          # --volume ssl-kubernetes,kind=host,source=/etc/ssl/kubernetes,readOnly=true \
          # --mount volume=ssl-kubernetes,target=/etc/ssl/kubernetes"

        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=http://127.0.0.1:8080 \
          --register-schedulable=false \
          --container-runtime=docker \
          --allow-privileged=true \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --hostname-override=$private_ipv4 \
          --cluster_dns=${dns_service_ip} \
          --cluster_domain=cluster.local
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target
    # - name: kubelet.service
    #   enable: true
    #   command: start
    # - name: "docker-tcp.socket"
    #     command: "start"
    #     enable: "true"
    #     content: |
    #       [Unit]
    #       Description=TCP socket for the Docker API
    #
    #       [Socket]
    #       ListenStream=2375
    #       Service=docker.service
    #       BindIPv6Only=both
    #
    #       [Install]
    #       WantedBy=sockets.target
